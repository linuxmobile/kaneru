
---
interface Props {
  noiseEnabled?: boolean;
}
---

<button id="theme-toggle-btn"
  class="absolute top-8 right-2 bg-gray-800 p-3 size-7 flex items-center justify-center hover:bg-gray-700 transition-colors">
  <span class="text-white text-xs">?</span>
</button>

<div id="theme-popup" class="absolute top-8 right-11 hidden items-center justify-center gap-x-2 text-white text-xs [&>button]:px-2">
  <button id="noise-toggle-btn" class="flex items-center justify-between w-full bg-gray-800 size-7">
    <span>Noise&nbsp;</span>
    <span id="noise-status">off</span>
  </button>
  <button id="color-mode-toggle-btn" class="flex items-center justify-between w-full bg-gray-800 size-7">
    <span class="whitespace-nowrap">Switch theme</span>
  </button>
</div>

<script is:inline>
  let isPopupOpen = false;
  let isNoiseEnabled = true;

  function togglePopup() {
    const popup = document.getElementById('theme-popup');
    isPopupOpen = !isPopupOpen;
    if (popup) {
      popup.classList.toggle('hidden', !isPopupOpen);
      popup.classList.toggle('flex', isPopupOpen);
    }
  }

  function toggleNoise() {
    isNoiseEnabled = !isNoiseEnabled;
    localStorage.setItem('showNoise', isNoiseEnabled.toString());
    updateNoiseStatusUI();
    document.dispatchEvent(new CustomEvent('toggle-noise', {
      detail: { noiseEnabled: isNoiseEnabled }
    }));
  }

  function toggleColorMode() {
    const isDark = document.documentElement.classList.contains('dark');
    document.documentElement.classList.toggle('dark');
    localStorage.setItem('theme', isDark ? 'light' : 'dark');
  }

  function updateNoiseStatusUI() {
     const noiseStatus = document.getElementById('noise-status');
     if (noiseStatus) {
       isNoiseEnabled = localStorage.getItem('showNoise') !== 'false';
       noiseStatus.textContent = isNoiseEnabled ? 'on' : 'off';
     }
  }

  function handleDocumentClick(event) {
    const target = event.target;
    const toggleBtn = document.getElementById('theme-toggle-btn');
    const popup = document.getElementById('theme-popup');
    if (isPopupOpen && toggleBtn && popup && !toggleBtn.contains(target) && !popup.contains(target)) {
      togglePopup();
    }
  }

  function initializeThemeControls() {
    const toggleBtn = document.getElementById('theme-toggle-btn');
    const popup = document.getElementById('theme-popup');
    const noiseToggleBtn = document.getElementById('noise-toggle-btn');
    const colorModeToggleBtn = document.getElementById('color-mode-toggle-btn');

    updateNoiseStatusUI();
    if (popup && isPopupOpen) {
        isPopupOpen = false;
        popup.classList.add('hidden');
        popup.classList.remove('flex');
    }

    document.removeEventListener('click', handleDocumentClick);
    toggleBtn?.removeEventListener('click', togglePopup);
    noiseToggleBtn?.removeEventListener('click', toggleNoise);
    colorModeToggleBtn?.removeEventListener('click', toggleColorMode);

    toggleBtn?.addEventListener('click', togglePopup);
    noiseToggleBtn?.addEventListener('click', toggleNoise);
    colorModeToggleBtn?.addEventListener('click', toggleColorMode);
    document.addEventListener('click', handleDocumentClick);

    document.dispatchEvent(new CustomEvent('toggle-noise', {
      detail: { noiseEnabled: isNoiseEnabled }
    }));
  }

  initializeThemeControls();

  document.addEventListener('astro:page-load', () => {
    initializeThemeControls();
  });

  document.addEventListener('astro:before-swap', () => {
    document.removeEventListener('click', handleDocumentClick);
  });

</script>
