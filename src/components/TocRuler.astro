---
export interface Props {
  headings: {
    depth: number;
    slug: string;
    text: string;
  }[];
}

const { headings = [] } = Astro.props;

const primaryHeadingCount = headings.filter(h => h.depth === 2).length;
const totalHeadingCount = headings.length;
const weightedCount = primaryHeadingCount * 1.5 + (totalHeadingCount - primaryHeadingCount);

let rulerHeightClass = 'h-28';
if (weightedCount <= 6) rulerHeightClass = 'h-28';
else if (weightedCount <= 8) rulerHeightClass = 'h-32';
else if (weightedCount <= 12) rulerHeightClass = 'h-36';
else if (weightedCount <= 16) rulerHeightClass = 'h-44';
else if (weightedCount <= 20) rulerHeightClass = 'h-50';
else rulerHeightClass = 'h-128';
---

{headings.length > 0 && (
  <div id="toc-ruler" class={`fixed left-8 top-1/2 -translate-y-1/2 flex flex-col items-center hidden md:flex ${rulerHeightClass}`}>
    <div class="relative h-full w-full">
      {headings.map((heading, index) => (
        <a
          href={`#${heading.slug}`}
          class={`absolute transition-all duration-300 group left-0 hover:w-24 toc-link ${heading.depth === 2 ? 'w-10 depth-2' : 'w-6 depth-3'}`}
          data-index={index}
          data-id={heading.slug}
          style={`top: ${(index / (headings.length - 1)) * 100}%`}>
          <div class="relative w-full group/line">
            <div class="absolute w-full h-3 -top-1.5 cursor-pointer">
              <div class="w-full h-0.5 mt-1.5 toc-line bg-gray-400 opacity-40 group-hover:opacity-100"></div>
              <span class="absolute left-full ml-2 text-xs opacity-0 group-hover/line:opacity-100 transition-opacity duration-200 whitespace-nowrap text-gray-500 top-1.5 -translate-y-1/2 pointer-events-none">
                {heading.text}
              </span>
            </div>
          </div>
        </a>
      ))}
    </div>
  </div>
)}

<script>
  let tocLinks;
  let headingsArray = [];
  let tocRuler;
  let documentHeight;
  let windowHeight;
  let activeIndex = -1;

  function initializeTocRuler() {
    tocRuler = document.getElementById('toc-ruler');
    if (!tocRuler) return;

    tocLinks = document.querySelectorAll('.toc-link');
    documentHeight = document.body.scrollHeight;
    windowHeight = window.innerHeight;

    headingsArray = Array.from(tocLinks).map((link, index) => {
      const id = link.getAttribute('data-id');
      const element = document.getElementById(id);
      return {
        index,
        element,
        id,
        depth: link.classList.contains('depth-2') ? 2 : 3,
        offsetTop: element ? element.offsetTop : 0
      };
    });
  }

  function updateTocRulerOnScroll() {
    if (!tocRuler || headingsArray.length === 0) return;

    const scrollY = window.scrollY;

    let currentHeadingIndex = -1;

    for (let i = headingsArray.length - 1; i >= 0; i--) {
      if (scrollY + 100 >= headingsArray[i].offsetTop) {
        currentHeadingIndex = i;
        break;
      }
    }

    if (currentHeadingIndex === -1) {
      currentHeadingIndex = 0;
    }

    if (activeIndex !== currentHeadingIndex) {
      activeIndex = currentHeadingIndex;

      tocLinks.forEach((link, index) => {
        const line = link.querySelector('.toc-line');

        if (index === currentHeadingIndex) {
          link.classList.remove('w-6', 'w-10');
          link.classList.add('w-16');

          if (line) {
            line.classList.remove('bg-gray-400', 'opacity-40');
            line.classList.add('bg-jp-purple', 'opacity-100');
          }
        } else {
          const depth = link.classList.contains('depth-2') ? 2 : 3;

          if (depth === 2) {
            link.classList.remove('w-16', 'w-6');
            link.classList.add('w-10');
          } else {
            link.classList.remove('w-16', 'w-10');
            link.classList.add('w-6');
          }

          if (line) {
            line.classList.remove('bg-jp-purple', 'opacity-100');
            line.classList.add('bg-gray-400', 'opacity-40');
          }
        }
      });
    }
  }

  function handleResize() {
    documentHeight = document.body.scrollHeight;
    windowHeight = window.innerHeight;

    headingsArray = headingsArray.map(heading => {
      const element = document.getElementById(heading.id);
      return {
        ...heading,
        offsetTop: element ? element.offsetTop : 0
      };
    });

    updateTocRulerOnScroll();
  }

  function setupListeners() {
    initializeTocRuler();
    window.addEventListener('scroll', updateTocRulerOnScroll, { passive: true });
    window.addEventListener('resize', handleResize);
    updateTocRulerOnScroll();
  }

  function removeListeners() {
    window.removeEventListener('scroll', updateTocRulerOnScroll);
    window.removeEventListener('resize', handleResize);
  }

  document.addEventListener('DOMContentLoaded', setupListeners);
  document.addEventListener('astro:page-load', setupListeners);
  document.addEventListener('astro:before-swap', removeListeners);
</script>
