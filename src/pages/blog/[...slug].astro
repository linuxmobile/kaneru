---
import { getCollection, getEntry, type CollectionEntry } from 'astro:content';
import { format } from 'date-fns';
import Layout from '@/layouts/Layout.astro';
import TocRuler from '@/components/TocRuler.astro';

export async function getStaticPaths() {
  const posts = await getCollection('blog', ({ data }) => !data.draft);
  return posts.map(post => ({
    params: { slug: post.slug },
    props: { post }
  }));
}

interface Props {
  post: CollectionEntry<'blog'>;
}

const { post } = Astro.props;
const { Content, headings } = await post.render();

const allArticles = await getCollection('blog', ({ data }) => !data.draft);
const sortedArticles = allArticles.sort((a, b) =>
  new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
);

const index = sortedArticles.findIndex(article => article.slug === post.slug);
const articleNumber = index !== -1
  ? String(sortedArticles.length - index).padStart(2, '0')
  : null;

const postDate = new Date(post.data.date);
const formattedDate = format(postDate, "do MMM yyyy");

const pageTitle = post.data.title;
const pageDescription = post.data.description;
const pageOgImage = post.data.ogImage ? { src: post.data.ogImage.src, alt: post.data.ogImage.alt } : undefined;
---

<Layout
  title={pageTitle}
  description={pageDescription}
  publishDate={postDate}
  ogImage={pageOgImage}
>
  <section class="flex items-center justify-start p-6 md:p-20 gap-x-8 border-b-1 border-gray-800">
    <div class="flex flex-col items-center justify-center border-1 border-jp-blue dark:border-jp-purple">
      <p class="!text-white bg-jp-blue dark:bg-jp-purple w-full p-2 text-center">品番</p>
      {articleNumber && (
        <p class="!text-gray-400 dark:text-gray-700 p-2">
          #0<span class="text-jp-blue dark:text-jp-purple">{articleNumber}</span>
        </p>
      )}
    </div>
    <div class="flex flex-col items-start justify-center">
      <p class="!text-gray-400 dark:text-gray-700">{formattedDate} /</p>
      <h1 class="font-semibold text-2xl text-jp-purple">{post.data.title}</h1>
    </div>
  </section>

  {headings.length > 0 && (
    <TocRuler headings={headings} />
  )}

  <div class="px-6 md:px-20 py-10 text-sm max-w-none prose flex flex-col gap-y-4">
    <Content />
  </div>
</Layout>

<style is:global>
:root {
  --prose-body-color: #374151;
  --prose-heading-color: #212475;
  --prose-link-color: #212475;
}

.dark {
  --prose-body-color: #d1d5db;
  --prose-heading-color: #9691D4;
  --prose-link-color: #9691D4;
}

.prose h1, .prose h2, .prose h3, .prose h4 {
  font-weight: 700;
  color: var(--prose-heading-color);
}

.prose h1, .prose h2 {
  font-size: 2em;
}

.prose h3 {
  font-size: 1.5em;
}

.prose h4 {
  font-size: 1.25em;
}

.prose h1 a, .prose h2 a, .prose h3 a, .prose h4 a {
  text-decoration: none;
  color: var(--prose-heading-color);
  font-weight: 700;
}

.prose h1, .prose h2 {
  display: flex;
  align-items: center;
}

.prose h1::before, .prose h2::before {
  content: '#';
  color: #374151;
  margin-right: 0.5em;
  font-weight: 400;
  opacity: 0.7;
}

.dark .prose h1::before, .dark .prose h2::before {
  color: #d1d5db;
}

.prose p, .prose ul, .prose ol, .prose dl {
  color: var(--prose-body-color);
}

.prose a:not(h1 a, h2 a, h3 a, h4 a) {
  color: var(--prose-body-color);
}

.prose strong {
  background-color: #374151;
  color: #fff;
  font-weight: 700;
  padding: 0 3px;
}

.dark .prose strong {
  background-color: #d1d5db;
  color: #090b0e;
}

.prose strong > a {
  background-color: #374151;
  color: #fff !important;
  font-weight: 700;
  padding: 0 3px;
  text-decoration: none;
}

.dark .prose strong > a {
  background-color: #d1d5db;
  color: #090b0e !important;
}
</style>
